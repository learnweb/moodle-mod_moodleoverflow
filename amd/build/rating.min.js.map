{"version":3,"file":"rating.min.js","sources":["../src/rating.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Implements rating functionality\n *\n * @module     mod_moodleoverflow/rating\n * @copyright  2022 Justus Dieckmann WWU\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Ajax from 'core/ajax';\nimport Prefetch from 'core/prefetch';\nimport {get_string as getString} from 'core/str';\n\nconst RATING_DOWNVOTE = 1;\nconst RATING_UPVOTE = 2;\nconst RATING_REMOVE_DOWNVOTE = 10;\nconst RATING_REMOVE_UPVOTE = 20;\nconst RATING_SOLVED = 3;\nconst RATING_HELPFUL = 4;\n\nconst root = document.getElementById('moodleoverflow-root');\n\n/**\n * Send a vote via AJAX, then updates post and user ratings.\n * @param {int} postid\n * @param {int} rating\n * @param {int} userid\n * @returns {Promise<*>}\n */\nasync function sendVote(postid, rating, userid) {\n    const response = await Ajax.call([{\n        methodname: 'mod_moodleoverflow_record_vote',\n        args: {\n            postid: postid,\n            ratingid: rating\n        }\n    }])[0];\n    root.querySelectorAll(`[data-moodleoverflow-userreputation=\"${userid}\"]`).forEach((i) => {\n        i.textContent = response.raterreputation;\n    });\n    root.querySelectorAll(`[data-moodleoverflow-userreputation=\"${response.ownerid}\"]`).forEach((i) => {\n        i.textContent = response.ownerreputation;\n    });\n    root.querySelectorAll(`[data-moodleoverflow-postreputation=\"${postid}\"]`).forEach((i) => {\n        i.textContent = response.postrating;\n    });\n    return response;\n}\n\n\n/**\n * Init function.\n *\n * @param {int} userid\n * @param {boolean} allowmultiplemarks   // true means allowed, false means not allowed.\n *\n */\nexport function init(userid, allowmultiplemarks) {\n    Prefetch.prefetchStrings('mod_moodleoverflow',\n        ['marksolved', 'marknotsolved', 'markhelpful', 'marknothelpful',\n            'action_remove_upvote', 'action_upvote', 'action_remove_downvote', 'action_downvote']);\n\n    root.onclick = async(event) => {\n        const actionElement = event.target.closest('[data-moodleoverflow-action]');\n        if (!actionElement) {\n            return;\n        }\n\n        const action = actionElement.getAttribute('data-moodleoverflow-action');\n        const postElement = actionElement.closest('[data-moodleoverflow-postid]');\n        const postid = postElement?.getAttribute('data-moodleoverflow-postid');\n\n        switch (action) {\n            case 'upvote':\n            case 'downvote': {\n                const isupvote = action === 'upvote';\n                if (actionElement.getAttribute('data-moodleoverflow-state') === 'clicked') {\n                    await sendVote(postid, isupvote ? RATING_REMOVE_UPVOTE : RATING_REMOVE_DOWNVOTE, userid);\n                    actionElement.setAttribute('data-moodleoverflow-state', 'notclicked');\n                    actionElement.title = await getString('action_' + action, 'mod_moodleoverflow');\n                } else {\n                    const otherAction = isupvote ? 'downvote' : 'upvote';\n                    await sendVote(postid, isupvote ? RATING_UPVOTE : RATING_DOWNVOTE, userid);\n                    actionElement.setAttribute('data-moodleoverflow-state', 'clicked');\n                    const otherElement = postElement.querySelector(\n                        `[data-moodleoverflow-action=\"${otherAction}\"]`);\n                    otherElement.setAttribute('data-moodleoverflow-state', 'notclicked');\n                    actionElement.title = await getString('action_remove_' + action, 'mod_moodleoverflow');\n                    otherElement.title = await getString('action_' + otherAction, 'mod_moodleoverflow');\n                }\n            }\n            break;\n            case 'helpful':\n            case 'solved': {\n                const isHelpful = action === 'helpful';\n                const htmlclass = isHelpful ? 'markedhelpful' : 'markedsolution';\n                const shouldRemove = postElement.classList.contains(htmlclass);\n                const baseRating = isHelpful ? RATING_HELPFUL : RATING_SOLVED;\n                const rating = shouldRemove ? baseRating * 10 : baseRating;\n                await sendVote(postid, rating, userid);\n\n                /* If       multiplemarks are not allowed (that is the default mode): delete all marks.\n                   else:    only delete the mark if the post is being unmarked.\n\n                   Add a mark, if the post is being marked.\n                */\n                if (!allowmultiplemarks) {\n                    // Delete all marks in the discussion\n                    for (const el of root.querySelectorAll('.moodleoverflowpost.' + htmlclass)) {\n                        el.classList.remove(htmlclass);\n                        el.querySelector(`[data-moodleoverflow-action=\"${action}\"]`).textContent =\n                            await getString(`mark${action}`, 'mod_moodleoverflow');\n                    }\n                } else {\n                    // Remove only the mark of the unmarked post.\n                    if (shouldRemove) {\n                        postElement.classList.remove(htmlclass);\n                        actionElement.textContent = await getString(`mark${action}`, 'mod_moodleoverflow');\n                        changeStrings(htmlclass, action);\n                    }\n                }\n                // If the post is being marked, mark it.\n                if (!shouldRemove) {\n                    postElement.classList.add(htmlclass);\n                    actionElement.textContent = await getString(`marknot${action}`, 'mod_moodleoverflow');\n                    if (allowmultiplemarks) {\n                        changeStrings(htmlclass, action);\n                    }\n                }\n\n            }\n        }\n    };\n\n}\n\n/**\n * Function to change the String of the post data-action button.\n * Only used if multiplemarks are allowed.\n * @param {string} htmlclass the class where the String is being updated\n * @param {string} action    helpful or solved mark\n */\nasync function changeStrings(htmlclass, action) {\n    Prefetch.prefetchStrings('mod_moodleoverflow',\n        ['marksolved', 'alsomarksolved', 'markhelpful', 'alsomarkhelpful',]);\n\n    // 1. Step: Are there other posts in the Discussion, that are solved/helpful?\n    var othermarkedposts = false;\n    for (const el of root.querySelectorAll('.moodleoverflowpost')) {\n        if (el.classList.contains(htmlclass)) {\n            othermarkedposts = true;\n            break;\n        }\n    }\n    // 2. Step: Change the strings of the action Button of the unmarked posts.\n    for (const el of root.querySelectorAll('.moodleoverflowpost')) {\n        if (!el.classList.contains(htmlclass) && el.querySelector(`[data-moodleoverflow-action=\"${action}\"]`)) {\n            if (othermarkedposts) {\n                el.querySelector(`[data-moodleoverflow-action=\"${action}\"]`).textContent =\n                    await getString(`alsomark${action}`, 'mod_moodleoverflow');\n            } else {\n                el.querySelector(`[data-moodleoverflow-action=\"${action}\"]`).textContent =\n                    await getString(`mark${action}`, 'mod_moodleoverflow');\n            }\n        }\n    }\n}"],"names":["userid","allowmultiplemarks","prefetchStrings","root","onclick","async","actionElement","event","target","closest","action","getAttribute","postElement","postid","isupvote","sendVote","setAttribute","title","otherAction","otherElement","querySelector","isHelpful","htmlclass","shouldRemove","classList","contains","baseRating","rating","remove","textContent","changeStrings","el","querySelectorAll","add","document","getElementById","response","Ajax","call","methodname","args","ratingid","forEach","i","raterreputation","ownerid","ownerreputation","postrating","othermarkedposts"],"mappings":";;;;;;;oFAsEqBA,OAAQC,sCAChBC,gBAAgB,qBACrB,CAAC,aAAc,gBAAiB,cAAe,iBAC3C,uBAAwB,gBAAiB,yBAA0B,oBAE3EC,KAAKC,QAAUC,MAAAA,cACLC,cAAgBC,MAAMC,OAAOC,QAAQ,oCACtCH,2BAICI,OAASJ,cAAcK,aAAa,8BACpCC,YAAcN,cAAcG,QAAQ,gCACpCI,OAASD,MAAAA,mBAAAA,YAAaD,aAAa,qCAEjCD,YACC,aACA,kBACKI,SAAsB,WAAXJ,UAC+C,YAA5DJ,cAAcK,aAAa,mCACrBI,SAASF,OAAQC,SA7Dd,GADE,GA8DsEd,QACjFM,cAAcU,aAAa,4BAA6B,cACxDV,cAAcW,YAAc,mBAAU,UAAYP,OAAQ,0BACvD,OACGQ,YAAcJ,SAAW,WAAa,eACtCC,SAASF,OAAQC,SApErB,EADE,EAqE+Dd,QACnEM,cAAcU,aAAa,4BAA6B,iBAClDG,aAAeP,YAAYQ,cAC5B,gCAA+BF,iBACpCC,aAAaH,aAAa,4BAA6B,cACvDV,cAAcW,YAAc,mBAAU,iBAAmBP,OAAQ,sBACjES,aAAaF,YAAc,mBAAU,UAAYC,YAAa,iCAIjE,cACA,gBACKG,UAAuB,YAAXX,OACZY,UAAYD,UAAY,gBAAkB,iBAC1CE,aAAeX,YAAYY,UAAUC,SAASH,WAC9CI,WAAaL,UA/EZ,EADD,EAiFAM,OAASJ,aAA4B,GAAbG,WAAkBA,oBAC1CX,SAASF,OAAQc,OAAQ3B,QAO1BC,mBASGsB,eACAX,YAAYY,UAAUI,OAAON,WAC7BhB,cAAcuB,kBAAoB,mBAAW,OAAMnB,SAAU,sBAC7DoB,cAAcR,UAAWZ,kBAVxB,MAAMqB,MAAM5B,KAAK6B,iBAAiB,uBAAyBV,WAC5DS,GAAGP,UAAUI,OAAON,WACpBS,GAAGX,cAAe,gCAA+BV,YAAYmB,kBACnD,mBAAW,OAAMnB,SAAU,sBAWxCa,eACDX,YAAYY,UAAUS,IAAIX,WAC1BhB,cAAcuB,kBAAoB,mBAAW,UAASnB,SAAU,sBAC5DT,oBACA6B,cAAcR,UAAWZ,mGA1G3CP,KAAO+B,SAASC,eAAe,sCAStBpB,SAASF,OAAQc,OAAQ3B,cAC9BoC,eAAiBC,cAAKC,KAAK,CAAC,CAC9BC,WAAY,iCACZC,KAAM,CACF3B,OAAQA,OACR4B,SAAUd,WAEd,UACJxB,KAAK6B,iBAAkB,wCAAuChC,YAAY0C,SAASC,IAC/EA,EAAEd,YAAcO,SAASQ,mBAE7BzC,KAAK6B,iBAAkB,wCAAuCI,SAASS,aAAaH,SAASC,IACzFA,EAAEd,YAAcO,SAASU,mBAE7B3C,KAAK6B,iBAAkB,wCAAuCnB,YAAY6B,SAASC,IAC/EA,EAAEd,YAAcO,SAASW,cAEtBX,wBAgGIN,cAAcR,UAAWZ,0BAC3BR,gBAAgB,qBACrB,CAAC,aAAc,iBAAkB,cAAe,wBAGhD8C,kBAAmB,MAClB,MAAMjB,MAAM5B,KAAK6B,iBAAiB,0BAC/BD,GAAGP,UAAUC,SAASH,WAAY,CAClC0B,kBAAmB,YAKtB,MAAMjB,MAAM5B,KAAK6B,iBAAiB,wBAC9BD,GAAGP,UAAUC,SAASH,YAAcS,GAAGX,cAAe,gCAA+BV,cAElFqB,GAAGX,cAAe,gCAA+BV,YAAYmB,YAD7DmB,uBAEU,mBAAW,WAAUtC,SAAU,4BAG/B,mBAAW,OAAMA,SAAU"}